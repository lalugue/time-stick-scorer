-- note: id being stored is actually a url (todo: cleanup)
local id
local shooter_position
go.property("shooter_url", msg.url())

function init(self)
	shooter_position = go.get_world_position(self.shooter_url)
end

function final(self)
	-- Add finalization code here
	-- Learn more: https://defold.com/manuals/script/
	-- Remove this function if not needed
end

function update(self, dt)
	-- Add update code here
	-- Learn more: https://defold.com/manuals/script/
	-- Remove this function if not needed
end

function fixed_update(self, dt)
	-- Add update code here
	-- Learn more: https://defold.com/manuals/script/
	-- Remove this function if not needed
end

function on_message(self, message_id, message, sender)
	if message_id == hash("create_aim") then
		print("id: ", id)
		print("aim position: ", message.position.x, message.position.y)
		if id then
			go.delete(id)
			id = nil
		end
		difference = shooter_position - message.position
		id = factory.create("#factory", message.position + (difference * 0.5))
		id = msg.url(id)
	elseif message_id == hash("end_aim") and id then
		go.delete(id)
		id = nil
	end
end

function on_input(self, action_id, action)
	-- Add input-handling code here. The game object this script is attached to
	-- must have acquired input focus:
	--
	--    msg.post(".", "acquire_input_focus")
	--
	-- All mapped input bindings will be received. Mouse and touch input will
	-- be received regardless of where on the screen it happened.
	-- Learn more: https://defold.com/manuals/input/
	-- Remove this function if not needed
end

function on_reload(self)
	-- Add reload-handling code here
	-- Learn more: https://defold.com/manuals/hot-reload/
	-- Remove this function if not needed
end
